import org.palladiosimulator.pcm.repository.OperationSignature
import org.emftext.language.java.annotations.AnnotationsFactory
import tools.vitruv.applications.pcmjava.confidentialitytransformations.confidentiality2annotations.Confidentiality2AnnotationsUtil
import org.modelversioning.emfprofileapplication.StereotypeApplication

import "http://www.emftext.org/java" as java
import "http://palladiosimulator.org/PalladioComponentModel/5.2" as pcm
import "http://edu.kit.kastel.scbs.confidentiality" as conf
import "http://www.modelversioning.org/emfprofile/application/1.1" as emfprofileApp

reactions: ConfidentialityApplications2Annotations 
in reaction to changes in Confidentiality
execute actions in Java

// ###################################################
// ######## APPLICATION TO ANNOTATION INSTANCE #######

reaction CreatedInformationFlowStereotypeApplication {
	after element emfprofileApp::StereotypeApplication created and inserted in emfprofileApp::ProfileApplication[stereotypeApplications]
	call {
		createAnnotationInstance(newValue)
	}
}

routine createAnnotationInstance(emfprofileApp::StereotypeApplication stereotypeApplication) {
	match {
		check Confidentiality2AnnotationsUtil.isInformationFlow(stereotypeApplication)
		check Confidentiality2AnnotationsUtil.isOperationSignature(stereotypeApplication.appliedTo)
	}
	action {
		val javaAnnotationInstance = create java::AnnotationInstance and initialize {
			javaAnnotationInstance.setAnnotation(Confidentiality2AnnotationsUtil.INFORMATION_FLOW_ANNOTATION)
		}
		execute {
			addAnnotationInstanceToMethod(stereotypeApplication.appliedTo as OperationSignature, javaAnnotationInstance)			
			setParametersAndDataPairsOfAnnotationInstance(stereotypeApplication.appliedTo as OperationSignature, javaAnnotationInstance)
		}
		add correspondence between stereotypeApplication and javaAnnotationInstance
	}
}

routine addAnnotationInstanceToMethod(pcm::OperationSignature pcmSignature, java::AnnotationInstance javaAnnotationInstance) {
	match {
		val javaMethod = retrieve java::Method corresponding to pcmSignature
	}
	action {
		update javaMethod {
			javaMethod.annotationInstances.add(javaAnnotationInstance)			
		}
	}
}

routine setParametersAndDataPairsOfAnnotationInstance(pcm::OperationSignature pcmSignature, java::AnnotationInstance javaAnnotationInstance) {
	match {
		val javaMethod = retrieve java::Method corresponding to pcmSignature
	}
	action {
		update javaAnnotationInstance {
			val javaAnnotationParameterList = AnnotationsFactory.eINSTANCE.createAnnotationParameterList
			// add all parameters and data pairs from signature to annotation instance if present
			val setting = Confidentiality2AnnotationsUtil.createAndInitializeAnnotationAttributeSetting(
				javaAnnotationParameterList, Confidentiality2AnnotationsUtil.getParametersAndDataPairs(pcmSignature)
			)
			javaAnnotationParameterList.settings.add(setting)
			javaAnnotationInstance.parameter = javaAnnotationParameterList		
		}
	}
}

reaction ReplacedInformationFlowStereotypeApplication {
	after element emfprofileApp::StereotypeApplication replaced at emfprofileApp::ProfileApplication[stereotypeApplications]
	call {
		replaceAnnotationInstance(oldValue, newValue)
	}
}

routine replaceAnnotationInstance(emfprofileApp::StereotypeApplication oldStereotypeApplication, emfprofileApp::StereotypeApplication newStereotypeApplication) {
	match {
		check Confidentiality2AnnotationsUtil.isInformationFlow(oldStereotypeApplication)
		check Confidentiality2AnnotationsUtil.isInformationFlow(newStereotypeApplication)
		check Confidentiality2AnnotationsUtil.isOperationSignature(newStereotypeApplication.appliedTo)
		val oldAnnotationInstance = retrieve java::AnnotationInstance corresponding to oldStereotypeApplication
	}
	action {
		delete oldAnnotationInstance
		val newAnnotationInstance = create java::AnnotationInstance and initialize {
			newAnnotationInstance.setAnnotation(Confidentiality2AnnotationsUtil.INFORMATION_FLOW_ANNOTATION)
		}
		execute {
			addAnnotationInstanceToMethod(newStereotypeApplication.appliedTo as OperationSignature, newAnnotationInstance)
			setParametersAndDataPairsOfAnnotationInstance(newStereotypeApplication.appliedTo as OperationSignature, newAnnotationInstance)			
		}
		add correspondence between newStereotypeApplication and newAnnotationInstance
	}
}

reaction DeletedInformationFlowStereotypeApplication {
	after element emfprofileApp::StereotypeApplication removed from emfprofileApp::ProfileApplication[stereotypeApplications]
	call {
		deleteAnnotationInstance(oldValue)
	}
}

routine deleteAnnotationInstance(emfprofileApp::StereotypeApplication oldStereotypeApplication) {
	match {
		check Confidentiality2AnnotationsUtil.isInformationFlow(oldStereotypeApplication)
		val javaAnnotationInstance = retrieve java::AnnotationInstance corresponding to oldStereotypeApplication
	}
	action {
		delete javaAnnotationInstance
	}
}

// ###################################################
// ############ PARAMETERS AND DATA PAIRS ############

reaction StereotypeApplicationParametersAndDataPairChanged {
	// workaround for updating parameters and data pairs
	after any change
	with (change.involvedEObjects.findFirst[it instanceof StereotypeApplication] as StereotypeApplication) !== null
	call {
		val stereotypeApplication = change.involvedEObjects.findFirst[it instanceof StereotypeApplication] as StereotypeApplication
		updateParametersAndDataPairsMemberValues(stereotypeApplication)
	}
}

routine updateParametersAndDataPairsMemberValues(emfprofileApp::StereotypeApplication stereotypeApplication) {
	match {
		check Confidentiality2AnnotationsUtil.isInformationFlow(stereotypeApplication)
		check Confidentiality2AnnotationsUtil.isOperationSignature(stereotypeApplication.appliedTo)
		val javaAnnotationInstance = retrieve java::AnnotationInstance corresponding to stereotypeApplication
	}
	action {
		execute {
			// avoid tedious work of parsing and updating the expression by just overwriting it
			setParametersAndDataPairsOfAnnotationInstance(stereotypeApplication.appliedTo as OperationSignature, javaAnnotationInstance)
		}
	}
}

// ###################################################
// #################### APPLIED TO ###################

reaction AppliedInformationFlowStereotypeToSignature {
	after element inserted in emfprofileApp::StereotypeApplication[appliedTo]
	call { 
		annotateInformationFlowToSignature(affectedEObject)
	}
}

routine annotateInformationFlowToSignature(emfprofileApp::StereotypeApplication stereotypeApplication) {
	match {
		check Confidentiality2AnnotationsUtil.isInformationFlow(stereotypeApplication)
		check Confidentiality2AnnotationsUtil.isOperationSignature(stereotypeApplication.appliedTo)
		val javaAnnotationInstance = retrieve java::AnnotationInstance corresponding to stereotypeApplication
	}
	action {
		execute {
			addAnnotationInstanceToMethod(stereotypeApplication.appliedTo as OperationSignature, javaAnnotationInstance)
		}
	}
}

reaction ReplacedInformationFlowStereotypeApplicationAppliedTo {
	after element replaced at emfprofileApp::StereotypeApplication[appliedTo]
	call { 
		replaceInformationFlowAnnotationInstance(affectedEObject, newValue, oldValue)
	}
}

routine replaceInformationFlowAnnotationInstance(emfprofileApp::StereotypeApplication stereotypeApplication, EObject newSignature, EObject oldSignature) {
	match {
		check Confidentiality2AnnotationsUtil.isInformationFlow(stereotypeApplication)
		check Confidentiality2AnnotationsUtil.isOperationSignature(newSignature)
		check Confidentiality2AnnotationsUtil.isOperationSignature(oldSignature)
		val javaAnnotationInstance = retrieve java::AnnotationInstance corresponding to stereotypeApplication
		val newMethod = retrieve java::Method corresponding to (newSignature as OperationSignature)
		val oldMethod = retrieve java::Method corresponding to (oldSignature as OperationSignature)
	}
	action {
		update oldMethod {
			oldMethod.annotationInstances.remove(javaAnnotationInstance)
		}
		update newMethod {
			newMethod.annotationInstances.add(javaAnnotationInstance)
		}
	}
}

reaction DeletedInformationFlowStereotypeApplicationAppliedTo {
	after element removed from emfprofileApp::StereotypeApplication[appliedTo]
	call { 
		deleteInformationFlowAnnotationInstance(affectedEObject, oldValue)
	}
}

routine deleteInformationFlowAnnotationInstance(emfprofileApp::StereotypeApplication stereotypeApplication, EObject pcmSignature) {
	match {
		check Confidentiality2AnnotationsUtil.isInformationFlow(stereotypeApplication)
		check Confidentiality2AnnotationsUtil.isOperationSignature(pcmSignature)
		val javaAnnotationInstance = retrieve java::AnnotationInstance corresponding to stereotypeApplication
		val javaMethod = retrieve java::Method corresponding to (pcmSignature as OperationSignature)
	}
	action {
		update javaMethod {
			javaMethod.annotationInstances.remove(javaAnnotationInstance)
		}
	}
}
