import org.emftext.language.java.modifiers.ModifiersFactory
import tools.vitruv.applications.pcmjava.confidentialitytransformations.confidentiality2annotations.Confidentiality2AnnotationsUtil
import edu.kit.kastel.scbs.confidentiality.data.DataIdentifying
import edu.kit.kastel.scbs.confidentiality.repository.ParametersAndDataPair
import tools.vitruv.applications.pcmjava.confidentialitytransformations.confidentiality2annotations.Confidentiality2AnnotationsContentCreationUtil
import org.emftext.language.java.arrays.ArrayInstantiationByValuesTyped
import org.emftext.language.java.references.StringReference
import org.emftext.language.java.arrays.ArrayInitializationValue
import org.eclipse.emf.common.util.EList

import "http://www.emftext.org/java" as java
import "http://edu.kit.kastel.scbs.confidentiality" as conf

reactions: Confidentiality2Annotations 
in reaction to changes in Confidentiality
execute actions in Java

// ###################################################
// ############### DATA SET REACTIONS ################

reaction CreatedDataSet {
	after element conf::DataSet created and inserted in conf::ConfidentialitySpecification[dataIdentifier]
	call {
		val dataSet = newValue
		val confidentialitySpecification = affectedEObject
		createDataSetAndInitialize(dataSet, confidentialitySpecification)
	}
}

routine createDataSetAndInitialize(conf::DataSet createdDataSet, conf::ConfidentialitySpecification confidentialitySpecification) {
	match {
		val dataSetsType = retrieve java::Enumeration corresponding to confidentialitySpecification tagged with "DataSets"
	}
	action {
		val enumConstant = create java::EnumConstant and initialize {
			Confidentiality2AnnotationsUtil.setDataSetEnumConstantContent(enumConstant, createdDataSet)
		}
		update dataSetsType {
			dataSetsType.constants.add(enumConstant)
		}
		add correspondence between createdDataSet and enumConstant
	}
}

reaction ReplacedDataSet {
	after element conf::DataSet replaced at conf::ConfidentialitySpecification[dataIdentifier]
	call {
		val newDataSet = newValue
		val oldDataSet = oldValue
		val confidentialitySpecification = affectedEObject
		replaceDataSet(newDataSet, oldDataSet, confidentialitySpecification)
	}
}

routine replaceDataSet(conf::DataSet newDataSet, conf::DataSet oldDataSet, conf::ConfidentialitySpecification confidentialitySpecification) {
	match {
		val dataSetsType = retrieve java::Enumeration corresponding to confidentialitySpecification tagged with "DataSets"
		val enumConstant = retrieve java::EnumConstant corresponding to oldDataSet
	}
	action {
		update enumConstant {
			Confidentiality2AnnotationsUtil.setDataSetEnumConstantContent(enumConstant, newDataSet)
		}
		remove correspondence between oldDataSet and enumConstant
		add correspondence between newDataSet and enumConstant
	}
}

reaction DeletedDataSet {
	after element conf::DataSet removed from conf::ConfidentialitySpecification[dataIdentifier]
	call {
		val deletedDataSet = oldValue
		val confidentialitySpecification = affectedEObject
		deleteDataSet(deletedDataSet, confidentialitySpecification)
	}
}

routine deleteDataSet(conf::DataSet deletedDataSet, conf::ConfidentialitySpecification confidentialitySpecification) {
	match {
		val dataSetsType = retrieve java::Enumeration corresponding to confidentialitySpecification tagged with "DataSets"
		val enumConstant = retrieve java::EnumConstant corresponding to deletedDataSet
	}
	action {
		update dataSetsType {
			dataSetsType.constants.remove(enumConstant)
		}
		delete enumConstant
	}
}

// ################## VALUE CHANGES ##################

reaction ChangedDataSetName {
	after attribute replaced at conf::DataSet[name]
	call {
		val dataSet = affectedEObject;
		changeDataSetName(dataSet);
	}
}

routine changeDataSetName(conf::DataSet dataSet) {
    match {
        val enumConstant = retrieve java::EnumConstant corresponding to dataSet
    }
    action {
        update enumConstant {
            enumConstant.name = Confidentiality2AnnotationsUtil.createEnumConstantName(dataSet.name);
            Confidentiality2AnnotationsUtil.changeDataSetEnumConstantNameArgument(enumConstant, dataSet);
        }
    }
}

reaction ChangedDataSetId {
	after attribute replaced at conf::DataSet[id]
	call {
		//val id = newValue
		val dataSet = affectedEObject
		changeDataSetId(dataSet)
	}
}

routine changeDataSetId(conf::DataSet dataSet) {
    match {
        val enumConstant = retrieve java::EnumConstant corresponding to dataSet
    }
    action {
        update enumConstant {
            Confidentiality2AnnotationsUtil.changeDataSetEnumConstantIdArgument(enumConstant, dataSet);
        }
    }
}

// ###################################################
// ######## PARAMETER AND DATA PAIRS REACTIONS #######

reaction CreatedParametersAndDataPair {
	after element conf::ParametersAndDataPair created and inserted in conf::ConfidentialitySpecification[parametersAndDataPairs]
	call {
		val parametersAndDataPair = newValue
		val confidentialitySpecification = affectedEObject
		createParametersAndDataPairAndInitialize(parametersAndDataPair, confidentialitySpecification);
	}
}

routine createParametersAndDataPairAndInitialize(conf::ParametersAndDataPair pair, conf::ConfidentialitySpecification confidentialitySpecification) {
	match {
		val parametersAndDataPairType = retrieve java::Enumeration corresponding to confidentialitySpecification tagged with "ParametersAndDataPairs"
	}
	action {
		val enumConstant = create java::EnumConstant and initialize {
			parametersAndDataPairType.constants.add(enumConstant)
			Confidentiality2AnnotationsUtil.setParameterAndDataPairEnumConstantContent(enumConstant, pair);
		}
		add correspondence between pair and enumConstant
	}
}

reaction ReplacedParametersAndDataPair {
	after element conf::ParametersAndDataPair replaced at conf::ConfidentialitySpecification[parametersAndDataPairs]
	call {
		val newParametersAndDataPair = newValue
		val oldParametersAndDataPair = oldValue
		val confidentialitySpecification = affectedEObject
		replaceParametersAndDataPair(newParametersAndDataPair, oldParametersAndDataPair, confidentialitySpecification)
	}
}

routine replaceParametersAndDataPair(conf::ParametersAndDataPair newParametersAndDataPair, conf::ParametersAndDataPair oldParametersAndDataPair, conf::ConfidentialitySpecification confidentialitySpecification) {
	match {
		val parametersAndDataPairsType = retrieve java::Enumeration corresponding to confidentialitySpecification tagged with "ParametersAndDataPairs"
		val enumConstant = retrieve java::EnumConstant corresponding to oldParametersAndDataPair
	}
	action {
		update enumConstant {
			Confidentiality2AnnotationsUtil.setParameterAndDataPairEnumConstantContent(enumConstant, newParametersAndDataPair)
		}
		remove correspondence between oldParametersAndDataPair and enumConstant
		add correspondence between newParametersAndDataPair and enumConstant
	}
}

reaction DeletedParametersAndDataPair {
	after element conf::ParametersAndDataPair removed from conf::ConfidentialitySpecification[parametersAndDataPairs]
	call {
		val deletedParametersAndDataPair = oldValue
		val confidentialitySpecification = affectedEObject
		deleteParametersAndDataPair(deletedParametersAndDataPair, confidentialitySpecification)
	}
}

routine deleteParametersAndDataPair(conf::ParametersAndDataPair deletedParametersAndDataPair, conf::ConfidentialitySpecification confidentialitySpecification) {
	match {
		val parametersAndDataPairsType = retrieve java::Enumeration corresponding to confidentialitySpecification tagged with "ParametersAndDataPairs"
		val enumConstant = retrieve java::EnumConstant corresponding to deletedParametersAndDataPair
	}
	action {
		update parametersAndDataPairsType {
			parametersAndDataPairsType.constants.remove(enumConstant)
		}
		delete enumConstant
	}
}

// ################## VALUE CHANGES ##################

reaction ChangedParametersAndDataPairName {
	after attribute replaced at conf::ParametersAndDataPair[name]
	call {
		val parametersAndDataPair = affectedEObject;
		changeParametersAndDataPairName(parametersAndDataPair);
	}
}

routine changeParametersAndDataPairName(conf::ParametersAndDataPair parametersAndDataPair) {
    match {
        val enumConstant = retrieve java::EnumConstant corresponding to parametersAndDataPair
    }
    action {
        update enumConstant {
            enumConstant.name = Confidentiality2AnnotationsUtil.createEnumConstantName(parametersAndDataPair.name);
        }
    }
}

reaction ReplacedParametersAndDataPairDataTarget {
	after element replaced at conf::ParametersAndDataPair[dataTargets]
	call {
		val DataIdentifying newDataTarget = newValue; // reference to existing data set
		val DataIdentifying oldDataTarget = oldValue;
		val ParametersAndDataPair parametersAndDataPair = affectedEObject;
		deleteParametersAndDataPairDataTarget(parametersAndDataPair, oldDataTarget)
  		insertParametersAndDataPairDataTarget(parametersAndDataPair, newDataTarget)
	}
}

reaction InsertedParametersAndDataPairDataTarget {
	after element inserted in conf::ParametersAndDataPair[dataTargets]
	call {
		val DataIdentifying dataTarget = newValue; // reference to existing data set
		val ParametersAndDataPair parametersAndDataPair = affectedEObject;
		insertParametersAndDataPairDataTarget(parametersAndDataPair, dataTarget);
	}
}

routine insertParametersAndDataPairDataTarget(conf::ParametersAndDataPair parametersAndDataPair, conf::DataIdentifying dataTarget) {
    match {
        val pairEnumConstant = retrieve java::EnumConstant corresponding to parametersAndDataPair
        val dataSetEnumConstant = retrieve java::EnumConstant corresponding to dataTarget
    }
    action {
        update pairEnumConstant {
            Confidentiality2AnnotationsUtil.insertEnumConstantDataTarget(pairEnumConstant, dataSetEnumConstant);
        }
    }
}

reaction DeletedParametersAndDataPairDataTarget {
	after element removed from conf::ParametersAndDataPair[dataTargets]
	call {
		val DataIdentifying dataTarget = oldValue;
		val ParametersAndDataPair parametersAndDataPair = affectedEObject;
		deleteParametersAndDataPairDataTarget(parametersAndDataPair, dataTarget);
	}
}

routine deleteParametersAndDataPairDataTarget(conf::ParametersAndDataPair parametersAndDataPair, conf::DataIdentifying dataTarget) {
    match {
        val pairEnumConstant = retrieve java::EnumConstant corresponding to parametersAndDataPair
        val dataSetEnumConstant = retrieve java::EnumConstant corresponding to dataTarget
    }
    action {
        update pairEnumConstant {
            Confidentiality2AnnotationsUtil.removeEnumConstantDataTarget(pairEnumConstant, dataSetEnumConstant);
        }
    }
}

// ################ PARAMETER SOURCES ################

reaction CreatedParametersAndDataPairParameterSource {
	after attribute insert in conf::ParametersAndDataPair[parameterSources]
	call {
		val parameterSource = newValue;
		val parametersAndDataPair = affectedEObject;
		createParametersAndDataPairParameterSource(parametersAndDataPair, parameterSource);
	}
}

routine createParametersAndDataPairParameterSource(conf::ParametersAndDataPair parametersAndDataPair, String parameterSource) {
    match {
        val enumConstant = retrieve java::EnumConstant corresponding to parametersAndDataPair
    }
    action {
        val stringLiteral = create java::StringReference and initialize {
    			stringLiteral.value = parameterSource;
        }
        update enumConstant {
				var ArrayInstantiationByValuesTyped stringArrayArgument
				stringArrayArgument = enumConstant.arguments.get(Confidentiality2AnnotationsUtil.PAIR_ARGUMENT_PARAMETER_SOURCES) as ArrayInstantiationByValuesTyped;
				stringArrayArgument.arrayInitializer.initialValues.add(stringLiteral)
        }
    }
}

reaction ReplacedParametersAndDataPairParameterSource {
	after attribute replaced at conf::ParametersAndDataPair[parameterSources]
	call {
		val newParameterSource = newValue;
		val oldParameterSource = oldValue;
		val parametersAndDataPair = affectedEObject;
		deleteParametersAndDataPairParameterSource(parametersAndDataPair, oldParameterSource)
		createParametersAndDataPairParameterSource(parametersAndDataPair, newParameterSource)
	}
}

reaction DeletedParametersAndDataPairParameterSource {
	after attribute remove from conf::ParametersAndDataPair[parameterSources]
	call {
		val oldParameterSource = oldValue;
		val parametersAndDataPair = affectedEObject;
		deleteParametersAndDataPairParameterSource(parametersAndDataPair, oldParameterSource);
	}
}

routine deleteParametersAndDataPairParameterSource(conf::ParametersAndDataPair parametersAndDataPair, String oldParameterSource) {
    match {
        val enumConstant = retrieve java::EnumConstant corresponding to parametersAndDataPair
    }
    action {
        update enumConstant {
				var ArrayInstantiationByValuesTyped stringArrayArgument
				stringArrayArgument = enumConstant.arguments.get(Confidentiality2AnnotationsUtil.PAIR_ARGUMENT_PARAMETER_SOURCES) as ArrayInstantiationByValuesTyped;
				val EList<ArrayInitializationValue> values = stringArrayArgument.arrayInitializer.initialValues
				var StringReference toRemove
				for (ArrayInitializationValue value : values) {
					val StringReference stringLiteral = value as StringReference
					if (toRemove.value.equals(oldParameterSource)) {
						toRemove = stringLiteral
					}
				}
				values.remove(toRemove)
        }
    }
}


// ###################################################
// ###### CONFIDENTIALITY REPOSITORY REACTIONS #######

reaction CreatedConfidentialitySpecification {
	after element conf::ConfidentialitySpecification created and inserted as root
	call {
		val specification = newValue
		createJavaPackage(specification, null, "confidentialityRepository", "specification");
		// Also create and add correspondences to java classes contained in package
		createConfidentialitySpecificationClasses(specification);
	}
}

routine createConfidentialitySpecificationClasses(conf::ConfidentialitySpecification specification)	 { 
	match {
		val confSpecificationPackage = retrieve java::Package corresponding to specification
	} 
	action { 
		call {
			createJavaAnnotation(specification, confSpecificationPackage, "InformationFlow", "InformationFlow");
			// TODO not working because of correspondence bug:
			// setInformationFlowAnnotationContent(specification);
			createJavaEnum(specification, confSpecificationPackage, "DataSets", "DataSets");
			setDataSetsEnumerationContent(specification);
			createJavaEnum(specification, confSpecificationPackage, "ParametersAndDataPairs", "ParametersAndDataPairs");
			setParametersAndDataPairsEnumerationContent(specification);
			// TODO only creation not yet content
			createJavaEnum(specification, confSpecificationPackage, "DataSetMapEntries", "DataSetMapEntries");
			createJavaEnum(specification, confSpecificationPackage, "DataSetMaps", "DataSetMaps");
			createJavaEnum(specification, confSpecificationPackage, "SpecificationParameters", "SpecificationParameters");
			createJavaEnum(specification, confSpecificationPackage, "ParameterizedDataSetMapEntries", "ParameterizedDataSetMapEntries");
		}
	}
}

// source: tools.vitruv.applications.pcmjava.pojotransformations.pcm2java
routine createJavaPackage(EObject sourceElementMappedToPackage, java::Package parentPackage, String packageName, String newTag)	 { 
	match {
		require absence of java::Package corresponding to sourceElementMappedToPackage tagged with newTag
	} 
	action { 
		val javaPackage = create java::Package and initialize {
			if (parentPackage !== null) {
				javaPackage.namespaces += parentPackage.namespaces;
				javaPackage.namespaces += parentPackage.name; 
			}
			javaPackage.name = packageName;
			persistProjectRelative(sourceElementMappedToPackage, javaPackage, Confidentiality2AnnotationsUtil.buildJavaFilePath(javaPackage));
		}
		add correspondence between javaPackage and sourceElementMappedToPackage tagged with newTag
	}
}

// modified from: tools.vitruv.applications.pcmjava.pojotransformations.pcm2java
routine createJavaAnnotation(conf::ConfidentialitySpecification specification, java::Package containingPackage, String className, String newTag) {
	action { 
		val javaAnnotation = create java::Annotation and initialize {
			javaAnnotation.name = className;
			javaAnnotation.addModifier(ModifiersFactory.eINSTANCE.createPublic());
		}
		add correspondence between javaAnnotation and specification tagged with newTag
		call createCompilationUnit(specification, javaAnnotation, containingPackage, newTag)
		// TODO workaround for the correspondence bug (possible since there is only a single annotation)
		execute {
			Confidentiality2AnnotationsContentCreationUtil.setInformationFlowAnnotation(javaAnnotation);
		}
	}
}

// modified from: tools.vitruv.applications.pcmjava.pojotransformations.pcm2java
routine createJavaEnum(conf::ConfidentialitySpecification specification, java::Package containingPackage, String className, String newTag) {
	action { 
		val javaEnumeration = create java::Enumeration and initialize {
			javaEnumeration.name = className;
			javaEnumeration.addModifier(ModifiersFactory.eINSTANCE.createPublic());
		}
		add correspondence between javaEnumeration and specification tagged with newTag
		call createCompilationUnit(specification, javaEnumeration, containingPackage, newTag)
	}
}

// modified from: tools.vitruv.applications.pcmjava.pojotransformations.pcm2java
routine createCompilationUnit(conf::ConfidentialitySpecification specification, java::ConcreteClassifier classifier, java::Package containingPackage, String newTag) {
	action {
		val compilationUnit = create java::CompilationUnit and initialize {
			compilationUnit.namespaces += containingPackage.namespaces;
			compilationUnit.namespaces += containingPackage.name;
			compilationUnit.name = classifier.name + ".java";
			compilationUnit.classifiers.add(classifier);
			persistProjectRelative(specification, compilationUnit, Confidentiality2AnnotationsUtil.buildJavaFilePath(compilationUnit));
		}
		add correspondence between compilationUnit and specification tagged with newTag
	}
}

// TODO not working because of correspondence bug
//routine setInformationFlowAnnotationContent(conf::ConfidentialitySpecification specification)	 { 
//	match {
//		val informationFlowAnnotation = retrieve java::Annotation corresponding to specification tagged with "InformationFlow"
//	} 
//	action { 
//		call {
//			Confidentiality2AnnotationsContentCreationUtil.setInformationFlowAnnotation(informationFlowAnnotation);
//		}
//	}
//}

routine setDataSetsEnumerationContent(conf::ConfidentialitySpecification specification)	 { 
	match {
		val dataSetsEnumeration = retrieve java::Enumeration corresponding to specification tagged with "DataSets"
	} 
	action { 
		call {
			Confidentiality2AnnotationsContentCreationUtil.setDataSetEnumeration(dataSetsEnumeration);
		}
	}
}

routine setParametersAndDataPairsEnumerationContent(conf::ConfidentialitySpecification specification)	 { 
	match {
		val parametersAndDataPairsEnumeration = retrieve java::Enumeration corresponding to specification tagged with "ParametersAndDataPairs"
	} 
	action { 
		call {
			Confidentiality2AnnotationsContentCreationUtil.setParametersAndDataPairEnumeration(parametersAndDataPairsEnumeration);
		}
	}
}